generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Plan {
  id            Int           @id @default(autoincrement())
  nombre        String
  descripcion   String?
  precio        Float?
  periodicidad  String?
  limites       String?
  entidades     Entidad[]
  suscripciones Suscripcion[]
  usuarios      Usuario[]
}

model Suscripcion {
  id          Int       @id @default(autoincrement())
  usuarioId   Int?
  entidadId   Int?
  planId      Int
  fechaInicio DateTime  @default(now())
  fechaFin    DateTime?
  activo      Boolean   @default(true)
  entidad     Entidad?  @relation(fields: [entidadId], references: [id])
  plan        Plan      @relation(fields: [planId], references: [id])
  usuario     Usuario?  @relation(fields: [usuarioId], references: [id])
}

model Entidad {
  id             Int           @id @default(autoincrement())
  nombre         String
  tipo           String
  correoContacto String
  telefono       String?
  direccion      String?
  fechaCreacion  DateTime      @default(now())
  planId         Int?
  almacenes      Almacen[]
  plan           Plan?         @relation(fields: [planId], references: [id])
  roles          Rol[]
  suscripciones  Suscripcion[]
  usuarios       Usuario[]
}

model Usuario {
  id                   Int                    @id @default(autoincrement())
  nombre               String
  apellidos            String
  correo               String                 @unique
  contrasena           String
  googleId             String?
  tipoCuenta           String
  estado               String                 @default("pendiente")
  fechaRegistro        DateTime               @default(now())
  entidadId            Int?
  archivoBuffer        Bytes?
  archivoNombre        String?
  codigoUsado          String?
  planId               Int?
  codigo2FASecret      String?
  fotoPerfil           Bytes?
  fotoPerfilNombre     String?
  metodo2FA            String?
  preferencias         String?
  tiene2FA             Boolean?               @default(false)
  esSuperAdmin         Boolean?               @default(false)
  archivosMaterial     ArchivoMaterial[]
  archivosUnidad       ArchivoUnidad[]
  auditLogs            AuditLog[]
  bitacoraCambios      BitacoraCambioPerfil[]
  chatMensajes         ChatMensaje[]
  documentosSubidos    DocumentoAlmacen[]     @relation("DocumentosSubidos")
  eventosCreados       EventoAlmacen[]        @relation("EventosCreados")
  historialAlmacenes   HistorialAlmacen[]
  historialLotes       HistorialLote[]
  historialUnidades    HistorialUnidad[]
  incidenciasCreadas   Incidencia[]           @relation("IncidenciasCreadas")
  incidenciasResueltas Incidencia[]           @relation("IncidenciasResueltas")
  materiales           Material[]
  movimientos          Movimiento[]
  movimientosMaterial  MovimientoMaterial[]
  notificaciones       Notificacion[]
  novedadesCreadas     NovedadAlmacen[]       @relation("NovedadesCreadas")
  PuntajeBreakout      PuntajeBreakout[]
  PuntajeFlappyBee     PuntajeFlappyBee[]
  PuntajeMario         PuntajeMario[]
  PuntajePacman        PuntajePacman[]
  PuntajePingPong      PuntajePingPong[]
  PuntajeSnake         PuntajeSnake[]
  PuntajeSpaceShooter  PuntajeSpaceShooter[]
  PuntajeTetris        PuntajeTetris[]
  sesiones             SesionUsuario[]
  suscripciones        Suscripcion[]
  entidad              Entidad?               @relation(fields: [entidadId], references: [id])
  plan                 Plan?                  @relation(fields: [planId], references: [id])
  almacenes            UsuarioAlmacen[]
  roles                Rol[]                  @relation("RolToUsuario")
}

model BitacoraCambioPerfil {
  id        Int      @id @default(autoincrement())
  usuarioId Int
  cambios   String
  fecha     DateTime @default(now())
  usuario   Usuario  @relation(fields: [usuarioId], references: [id])
}

model SesionUsuario {
  id          Int      @id @default(autoincrement())
  usuarioId   Int
  userAgent   String?
  ip          String?
  fechaInicio DateTime @default(now())
  fechaUltima DateTime @default(now())
  activa      Boolean  @default(true)
  usuario     Usuario  @relation(fields: [usuarioId], references: [id])
}

model Rol {
  id          Int       @id @default(autoincrement())
  nombre      String
  descripcion String?
  permisos    Json
  entidadId   Int?
  entidad     Entidad?  @relation(fields: [entidadId], references: [id])
  usuarios    Usuario[] @relation("RolToUsuario")
}

model Almacen {
  id                      Int                @id @default(autoincrement())
  nombre                  String
  descripcion             String?
  imagenUrl               String?
  codigoUnico             String             @unique
  funciones               String?
  permisosPredeterminados Json?
  fechaCreacion           DateTime           @default(now())
  entidadId               Int
  imagen                  Bytes?
  imagenNombre            String?
  alertas                 Alerta[]
  entidad                 Entidad            @relation(fields: [entidadId], references: [id])
  codigos                 CodigoAlmacen[]
  documentos              DocumentoAlmacen[]
  eventos                 EventoAlmacen[]
  historial               HistorialAlmacen[]
  incidencias             Incidencia[]
  materiales              Material[]
  movimientos             Movimiento[]
  notificaciones          Notificacion[]
  novedades               NovedadAlmacen[]
  usuarios                UsuarioAlmacen[]
}

model UsuarioAlmacen {
  id            Int     @id @default(autoincrement())
  usuarioId     Int
  almacenId     Int
  rolEnAlmacen  String  @db.VarChar(50)
  permisosExtra Json?
  almacen       Almacen @relation(fields: [almacenId], references: [id])
  usuario       Usuario @relation(fields: [usuarioId], references: [id])

  @@unique([usuarioId, almacenId])
}

model CodigoAlmacen {
  id              Int       @id @default(autoincrement())
  almacenId       Int
  codigo          String    @unique
  rolAsignado     String    @db.VarChar(50)
  permisos        Json?
  usosDisponibles Int?
  activo          Boolean   @default(true)
  fechaCreacion   DateTime  @default(now())
  fechaExpiracion DateTime?
  creadoPorId     Int?
  almacen         Almacen   @relation(fields: [almacenId], references: [id])
}

model Movimiento {
  id          Int      @id @default(autoincrement())
  tipo        String
  cantidad    Int
  fecha       DateTime @default(now())
  descripcion String?
  almacenId   Int
  usuarioId   Int?
  contexto    Json?
  almacen     Almacen  @relation(fields: [almacenId], references: [id], onDelete: Cascade)
  usuario     Usuario? @relation(fields: [usuarioId], references: [id])
}

model HistorialAlmacen {
  id          Int      @id @default(autoincrement())
  almacenId   Int
  descripcion String?
  estado      Json?
  fecha       DateTime @default(now())
  usuarioId   Int?
  almacen     Almacen  @relation(fields: [almacenId], references: [id], onDelete: Cascade)
  usuario     Usuario? @relation(fields: [usuarioId], references: [id])
}

model EventoAlmacen {
  id          Int       @id @default(autoincrement())
  titulo      String
  descripcion String?
  fechaInicio DateTime
  fechaFin    DateTime?
  tipo        String?
  archivoUrl  String?
  almacenId   Int
  creadoPorId Int
  almacenes   Almacen   @relation(fields: [almacenId], references: [id])
  creadoPor   Usuario   @relation("EventosCreados", fields: [creadoPorId], references: [id])
}

model NovedadAlmacen {
  id          Int      @id @default(autoincrement())
  titulo      String
  contenido   String
  fecha       DateTime @default(now())
  almacenId   Int
  creadoPorId Int
  almacenes   Almacen  @relation(fields: [almacenId], references: [id])
  creadoPor   Usuario  @relation("NovedadesCreadas", fields: [creadoPorId], references: [id])
}

model Notificacion {
  id        Int      @id @default(autoincrement())
  usuarioId Int
  mensaje   String
  leida     Boolean  @default(false)
  tipo      String?
  fecha     DateTime @default(now())
  almacenId Int?
  almacenes Almacen? @relation(fields: [almacenId], references: [id])
  usuario   Usuario  @relation(fields: [usuarioId], references: [id])
}

model DocumentoAlmacen {
  id          Int      @id @default(autoincrement())
  nombre      String
  url         String
  descripcion String?
  fecha       DateTime @default(now())
  version     String?
  almacenId   Int
  subidoPorId Int
  almacen     Almacen  @relation(fields: [almacenId], references: [id])
  subidoPor   Usuario  @relation("DocumentosSubidos", fields: [subidoPorId], references: [id])
}

model Incidencia {
  id            Int       @id @default(autoincrement())
  titulo        String
  descripcion   String
  estado        String    @default("abierta")
  fecha         DateTime  @default(now())
  almacenId     Int
  creadaPorId   Int
  resueltaPorId Int?
  fechaResuelta DateTime?
  almacen       Almacen   @relation(fields: [almacenId], references: [id])
  creadaPor     Usuario   @relation("IncidenciasCreadas", fields: [creadaPorId], references: [id])
  resueltaPor   Usuario?  @relation("IncidenciasResueltas", fields: [resueltaPorId], references: [id])
}

model Alerta {
  id        Int             @id @default(autoincrement())
  titulo    String
  mensaje   String?
  fecha     DateTime        @default(now())
  prioridad PrioridadAlerta @default(MEDIA)
  activa    Boolean         @default(true)
  tipo      String?
  almacenId Int
  almacen   Almacen         @relation(fields: [almacenId], references: [id])
}

model Material {
  id                  Int                  @id @default(autoincrement())
  nombre              String
  descripcion         String?
  miniatura           Bytes?
  miniaturaNombre     String?
  cantidad            Float
  unidad              String?
  lote                String?
  fechaCaducidad      DateTime?
  ubicacion           String?
  proveedor           String?
  estado              String?
  observaciones       String?
  minimo              Float?
  maximo              Float?
  fechaRegistro       DateTime             @default(now())
  fechaActualizacion  DateTime             @updatedAt
  almacenId           Int
  usuarioId           Int?
  codigoBarra         String?
  codigoQR            String?
  reorderLevel        Int?
  archivos            ArchivoMaterial[]
  historialLotes      HistorialLote[]
  almacen             Almacen              @relation(fields: [almacenId], references: [id])
  usuario             Usuario?             @relation(fields: [usuarioId], references: [id])
  unidades            MaterialUnidad[]
  movimientosMaterial MovimientoMaterial[]
}

model ArchivoMaterial {
  id            Int      @id @default(autoincrement())
  nombre        String
  archivo       Bytes?
  archivoNombre String?
  fecha         DateTime @default(now())
  materialId    Int
  subidoPorId   Int?
  material      Material @relation(fields: [materialId], references: [id])
  subidoPor     Usuario? @relation(fields: [subidoPorId], references: [id])
}

model ArchivoUnidad {
  id            Int            @id @default(autoincrement())
  nombre        String
  archivo       Bytes?
  archivoNombre String?
  fecha         DateTime       @default(now())
  unidadId      Int
  subidoPorId   Int?
  subidoPor     Usuario?       @relation(fields: [subidoPorId], references: [id])
  unidad        MaterialUnidad @relation(fields: [unidadId], references: [id], onDelete: Cascade)
}

model HistorialLote {
  id          Int      @id @default(autoincrement())
  materialId  Int
  lote        String?
  descripcion String?
  ubicacion   String?
  cantidad    Float?
  fecha       DateTime @default(now())
  usuarioId   Int?
  estado      Json?
  material    Material @relation(fields: [materialId], references: [id])
  usuario     Usuario? @relation(fields: [usuarioId], references: [id])
}

model HistorialUnidad {
  id          Int            @id @default(autoincrement())
  unidadId    Int
  descripcion String?
  estado      Json?
  fecha       DateTime       @default(now())
  usuarioId   Int?
  unidad      MaterialUnidad @relation(fields: [unidadId], references: [id], onDelete: Cascade)
  usuario     Usuario?       @relation(fields: [usuarioId], references: [id])
}

model MaterialUnidad {
  id                 Int               @id @default(autoincrement())
  nombre             String
  materialId         Int
  codigoQR           String            @unique @default(dbgenerated("gen_random_uuid()"))
  internoId          String?
  serie              String?
  codigoBarra        String?
  lote               String?
  qrGenerado         String?
  unidadMedida       String?
  peso               Float?
  volumen            Float?
  alto               Float?
  largo              Float?
  ancho              Float?
  color              String?
  temperatura        String?
  estado             String?
  ubicacionExacta    String?
  area               String?
  subcategoria       String?
  riesgo             String?
  disponible         Boolean?
  asignadoA          String?
  fechaIngreso       DateTime?
  fechaModificacion  DateTime?
  fechaCaducidad     DateTime?
  fechaInspeccion    DateTime?
  fechaBaja          DateTime?
  responsableIngreso String?
  modificadoPor      String?
  proyecto           String?
  observaciones      String?
  imagen             Bytes?
  imagenNombre       String?
  archivos           ArchivoUnidad[]
  historial          HistorialUnidad[]
  material           Material          @relation(fields: [materialId], references: [id])

  @@unique([materialId, nombre])
}

model MovimientoMaterial {
  id          Int      @id @default(autoincrement())
  tipo        String
  cantidad    Float
  fecha       DateTime @default(now())
  descripcion String?
  materialId  Int
  usuarioId   Int?
  contexto    Json?
  material    Material @relation(fields: [materialId], references: [id], onDelete: Cascade)
  usuario     Usuario? @relation(fields: [usuarioId], references: [id])
}

model ChatCanal {
  id          Int           @id @default(autoincrement())
  nombre      String
  fechaCreado DateTime      @default(now())
  mensajes    ChatMensaje[]
}

model ChatMensaje {
  id            Int       @id @default(autoincrement())
  canalId       Int
  usuarioId     Int
  texto         String?
  archivo       String?
  archivoNombre String?
  archivoTipo   String?
  anclado       Boolean   @default(false)
  fecha         DateTime  @default(now())
  canal         ChatCanal @relation(fields: [canalId], references: [id])
  usuario       Usuario   @relation(fields: [usuarioId], references: [id])

  @@index([canalId])
}

model PuntajeBreakout {
  id        Int      @id @default(autoincrement())
  usuarioId Int
  nivel     Int
  puntaje   Int
  fecha     DateTime @default(now())
  Usuario   Usuario  @relation(fields: [usuarioId], references: [id])
}

model PuntajeFlappyBee {
  id        Int      @id @default(autoincrement())
  usuarioId Int
  distancia Int
  puntaje   Int
  fecha     DateTime @default(now())
  Usuario   Usuario  @relation(fields: [usuarioId], references: [id])
}

model PuntajeMario {
  id        Int      @id @default(autoincrement())
  usuarioId Int
  nivel     Int
  puntaje   Int
  fecha     DateTime @default(now())
  Usuario   Usuario  @relation(fields: [usuarioId], references: [id])
}

model PuntajePacman {
  id        Int      @id @default(autoincrement())
  usuarioId Int
  puntaje   Int
  fecha     DateTime @default(now())
  Usuario   Usuario  @relation(fields: [usuarioId], references: [id])
}

model PuntajePingPong {
  id        Int      @id @default(autoincrement())
  usuarioId Int
  rondas    Int
  puntaje   Int
  fecha     DateTime @default(now())
  Usuario   Usuario  @relation(fields: [usuarioId], references: [id])
}

model PuntajeSnake {
  id        Int      @id @default(autoincrement())
  usuarioId Int
  longitud  Int
  puntaje   Int
  fecha     DateTime @default(now())
  Usuario   Usuario  @relation(fields: [usuarioId], references: [id])
}

model PuntajeSpaceShooter {
  id        Int      @id @default(autoincrement())
  usuarioId Int
  enemigos  Int
  puntaje   Int
  fecha     DateTime @default(now())
  Usuario   Usuario  @relation(fields: [usuarioId], references: [id])
}

model PuntajeTetris {
  id        Int      @id @default(autoincrement())
  usuarioId Int
  lineas    Int
  puntaje   Int
  fecha     DateTime @default(now())
  Usuario   Usuario  @relation(fields: [usuarioId], references: [id])
}

model AuditLog {
  id        Int      @id @default(autoincrement())
  usuarioId Int?
  accion    String
  entidad   String
  payload   Json?
  fecha     DateTime @default(now())
  usuario   Usuario? @relation(fields: [usuarioId], references: [id])
}

enum PrioridadAlerta {
  ALTA
  MEDIA
  BAJA
}

model Nota {
  id        Int      @id @default(autoincrement())
  tabId     String
  tipo      NotaTipo
  contenido String
}

enum NotaTipo {
  imagen
  url
  doc
  sticky
}
